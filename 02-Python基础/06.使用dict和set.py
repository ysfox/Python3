#!/usr/bin/env python3
# -*- coding: utf-8 -*-

#############################################dict############################################
#Python内置了字典,具有极快的查找速度,dict内部存放的顺序和key放入的顺序是没有关系的
#正确使用dict非常重要，需要牢记的第一条就是dict的key必须是不可变对象
#在Python中，字符串、整数等都是不可变的
d = {'Michael': 95, 'Bob': 75, 'Tracy': 85}
print(d['Michael'])				#95


#把数据放入dict的方法，除了初始化时指定外，还可以通过key放入：
d['Adam'] = 67
print(d['Adam'])				#67


#多次对一个key放入value，后面的值会把前面的值冲掉
d['Jack'] = 90
d['Jack'] = 88
print(d['Jack'])				#88


#如果key不存在，dict就会报错：
# d['Thomas']					KeyError: 'Thomas'
#要避免key不存在的错误，有两种办法，一是通过in判断key是否存在
#二是通过dict提供的get方法，如果key不存在，可以返回None，或者自己指定的value：
print('Thomas' in d)			#False
print(d.get('Thomas'))			#None 注意：返回None的时候Python的交互式命令行不显示结果。
print(d.get('Thomas', -1))		#-1



#要删除一个key，用pop(key)方法，对应的value也会从dict中删除
print(d.pop('Bob'))				#75
print(d)						#{'Michael': 95, 'Tracy': 85, 'Jack': 88, 'Adam': 67}

#############################################dict############################################






##############################################set############################################
#set和dict类似，也是一组key的集合，但不存储value,由于key不能重复，所以，在set中，没有重复的key
#set和dict的唯一区别仅在于没有存储对应的value，但是，set的原理和dict一样，所以，同样不可以放入可变对象
s = set([1, 2, 3])
print(s)						#{1, 2, 3}

#重复元素在set中自动被过滤
s = set([1, 1, 2, 2, 3, 3])
print(s)						#{1, 2, 3}

#add(key)方法可以添加元素到set中，可以重复添加，但不会有效果
s.add(4)
s.add(4)
print(s)						#{1, 2, 3, 4}


#通过remove(key)方法可以删除元素
s.remove(4)
print(s)						#{1, 2, 3}


#set可以看成数学意义上的无序和无重复元素的集合，因此，两个set可以做数学意义上的交集、并集等操作
s1 = set([1, 2, 3])
s2 = set([2, 3, 4])
print(s1 & s2)					#{2, 3}
print(s1 | s2)					#{1，2，3，4}




##############################################set############################################






###########################################再议不可变对象#######################################
#list内部的内容是会变化的
a = ['c', 'b', 'a']
a.sort()
print(a)						#['a', 'b', 'c']


#对于不可变对象，比如str，对str进行操作
#调用对象自身的任意方法，也不会改变该对象自身的内容。
#相反，这些方法会创建新的对象并返回，这样，就保证了不可变对象本身永远是不可变的
a = 'abc'
print(a.replace('a', 'A'))		#Abc   replace方法创建了一个新字符串'Abc'并返回
print(a)						#abc


###########################################再议不可变对象#######################################